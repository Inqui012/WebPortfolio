body{
    margin: 0; padding:0;
}


span{
    background-color: dodgerblue;
    width: 500px;
    /* margin: 0 auto; */
    height: 100px;
    display: block;
}
/* 
display: none
	 요소를 보여주지 않는다

/* 
block
    가로 영역을 모두 채운다
*/
/*     
inline
	inline은 주로 텍스트를 주입 할 때 사용 되는 형태.
	width, height속성들을 가질 수 없다(이런 속성을 지정하더라도 무시된다)
*/
/*
inline-block
    인라인 요소와는 달리 '블록 요소'처럼
    width와 height 속성 지정 및 margin과 padding 속성의
    상하 간격 지정이 가능하다. 
*/

.firstDiv{
    margin-top:10px;
    margin-right:10px;
    /* ! body 입장에서 padding 이기 때문에 잘못된 케이스*/
    margin-bottom:10px;
    margin-left:10px;
    /* ! body 입장에서 padding 이기 때문에 잘못된 케이스*/
    background-color: #555;
}

/* 
축약법
    margin: 10px                      - 모든 방향
    margin: 10px 20px               - 위아래 / 양옆
    margin: 10px 20px 30px        - 위 / 양옆 / 아래
    margin: 10px 20px 30px 40px - 위 / 오른쪽 / 아래 / 왼쪽 
 */
.firstDiv article{
    background-color: #039;
    color: white;
}

.secondDiv{
    background-color: #ddd;
    margin: 20px 15px;
    /* 
        !firstDiv의 margin-bottom: 10px 상쇄.
        ? secondDiv의 margin-top이 더 크기 때문.
    */
}
.secondDiv article{
    background-color: #930;
    margin: 10px;
}

.centerDiv{
    width: 300px;
    border: 1px solid #33f;
    padding: 10px;
    /* 
        ! padding은 본래 대상의 크기에 가산된다. border도 마찬가지. 
    */
    margin: 0 auto;
    /* 
        0(상하) auto(좌우)는 좌측과 우측에 browser가
        자신의 width - 대상의 width /2 를통해 공통마진을 부여.
        그래서 가운데 위치할 수 있음. 
    */
    text-align: center;
}
.centerDiv article{
    margin: 0 10px;
    /* ! margin과 부모의 padding 은 섞이지 않는다. 무조건 가산됨. */
    background-color: #f33;
    color: white;
}

.paddingDiv{
    padding: 10px 20px;
    border:3px solid #333;
    background-color: #ff3;
    width: 100px;
    box-sizing: border-box;
    /* 
        ! box-sizing: border-box; 를 설정하면 padding 및 border의 사이즈는 더이상 width에 가산되지 않는다.  
    */
}
.paddingDiv article{
    background-color:#039;
    color: white;
}





/* 패딩(padding)
	- padding 속성은 내용(content)과 테두리(border) 사이의 간격인 패딩 영역의 크기를 설정합니다.
	- 이러한 패딩 영역은 background-color 속성으로 설정하는 배경색의 영향을 함께 받습니다.
    -CSS를 사용하면 패딩 영역의 크기를 방향별로 따로 설정할 수 있습니다. */
    
/* 마진(Margin)
-margin 속성은 테두리(border)와 이웃하는 요소 사이의 간격인 마진 영역의 크기를 설정합니다.
-마진 영역은 패딩 영역과는 달리 background-color 속성으로 설정하는 배경색의 영향을 받지 않습니다.
-CSS를 사용하면 마진 영역의 크기를 방향별로 따로 설정할 수 있습니다.
-margin 속성값을 음수(-)로 설정하여 해당 요소를 다른 요소의 위에 겹치게 할 수도 있습니다.

-margin 속성값을 auto로 설정하면, 웹 브라우저가 수평 방향 마진(margin) 값을 자동으로 설정합니다.
-즉, 해당 HTML 요소의 왼쪽과 오른쪽 마진을 자동으로 설정하게 됩니다.
-그 결과 해당 요소는 그 요소를 포함하고 있는 부모(parent) 요소의 정중앙에 위치하게 됩니다. */

/* margin-top          -> 위쪽 바깥여백
margin-right        -> 오른쪽 바깥여백
margin-bottom     -> 아래쪽 바깥여백
margin-left           -> 왼쪽 바깥여백

margin: 10px                      - 모든 방향
margin: 10px 20px               - 위아래 / 양옆
margin: 10px 20px 30px        - 위 / 양옆 / 아래
margin: 10px 20px 30px 40px - 위 / 오른쪽 / 아래 / 왼쪽 */

/* padding과 margin은 여백을 위해 사용하는건데, padding은 자신의 몸을 늘리는 것 이라고하면, margin은 자신의 몸을 그대로 유지한채 주변의 공간을 늘리는것으로, 
padding은 안쪽여백에 사용되고  margin은 바깥여백에 사용된다. 
안과 밖을 나누는 기준은 border가 되는데, 이를 기준으로 border밖은 margin, border안은 padding을 사용한다.  */



/* none : 요소를 아예 보여주지 않습니다.
block : 요소를 블록요소로 보여줍니다.
inline : 요소를 인라인 요소로 보여줍니다.
inline-block : 요소를 인라인-블록(두 가지 특징을 동시에 가진 형태)로 보여줍니다.
inherit : 부모의 속성 값을 상속 받습니다. */


/* display: none
	 요소를 보여주지 않습니다. 
	-속성 값은 주로 JavaScript와 함께 동적인 페이지를 구현하는데 활용됩니다. 탭이나 메뉴 등에서 내용을 보이거나 감추거나 할 때, 유용하게 사용됩니다. */

/* block
	-display 속성이 block으로 지정된 태그는 기본적으로 가로 영역을 모두 채워, 다른 태그들을 다른 줄로 밀어내고 혼자 한 줄을 차지한다.
    - block 태그는 inline 태그와 달리 width, height, margin, padding 속성이 모두 반영이 됩니다. */
/*     
    inline
	-inline은 주로 텍스트를 주입 할 때 사용 되는 형태.
	-width, height속성들을 가질 수 없다(이런 속성을 지정하더라도 무시된다)
    -margin 속성은 좌우 간격만 반영이 되고, 상하 간격은 반영이 되지 않습니다. */
    
    /* inline-block
	'인라인-블록'이라는 형태는 인라인의 특성과 블록 요소의 특성을 같이 가지고 있는 형태. 
	- '인라인 요소'처럼 요소 자체로 줄 바꿈이 일어나지 않습니다. 
	- 인라인 요소와는 달리 '블록 요소'처럼 width와 height 속성 지정 및 margin과 padding 속성의 상하 간격 지정이 가능하다. 
	-만약 width와 height를 지정하지 않을 경우, inline과 같이 컨텐츠만큼 영역이 잡힌다.
	- 대표적인 inline-block 태그로 <button>이나 <select> 태그 등이 있다. */